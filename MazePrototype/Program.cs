using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MazePrototype
{
    class Program
    {
        char[,] Maze = new char[16, 16];

        static void Main()
        {
            Program n = new Program();

            n.Maze = new char[,]
                {{'■','@','■','■','■','■','■','■','■','■','■','■','■','■','■','■'}, //0
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //1
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //2
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //3
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //4
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //5
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //6
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //7
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //8
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //9
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //10
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //11
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //12
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //13
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //14
                 {'■','■','■','■','■','■','■','■','■','■','■','■','■','■','!','■'}};//15
                // 0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
                
            n.ResetMaze();
            
            n.PrintMaze();

            bool IsPathConstructed = false;
            int[] Point = new int[2];
            int RndNo = 0;
            int Direction;
            int[,] VertVars = { {0, -1, 0}, {14, 1, 1} };
            do
            {
                if (Point[0] == 14 && Point[1] == 14)
                {
                    IsPathConstructed = true;
                }

                RndNo = n.GenerateRnd(RndNo);

                if (RndNo == 0) //Up or Down
                {
                    Direction = 0;
                    Point[1]--;
                    n.Maze[Point[1], Point[0]] = '^';
                    for (int i = -1; i < 2; i += 2)
                    {
                        if ((n.Maze[Point[1], Point[0] + i] == '#') | (n.Maze[Point[1], Point[0] + i] == ' '))
                        {
                            n.Maze[Point[1], Point[0] + i] = '#';
                        };
                    };
                }
                else if (RndNo == 1) //Down
                {
                    Direction = 1;
                    Point[1]++;
                    n.Maze[Point[1], Point[0]] = '/';
                    for (int i = -1; i < 2; i += 2)
                    {
                        if ((n.Maze[Point[1], Point[0] + i] == '#') | (n.Maze[Point[1], Point[0] + i] == ' '))
                        {
                            n.Maze[Point[1], Point[0] + i] = '#';
                        };
                    };
                }
                else if (RndNo == 2) //Left
                {
                    Direction = 3;
                    Point[0]--;
                    n.Maze[Point[1], Point[0]] = '<';
                    for (int i = -1; i < 2; i += 2)
                    {
                        if ((n.Maze[Point[1] + i, Point[0]] == '#') | (n.Maze[Point[1] + i, Point[0]] == ' '))
                        {
                            n.Maze[Point[1] + i, Point[0]] = '#';
                        };
                    };
                }
                else if (RndNo == 3) //Right
                {
                    Direction = 4;
                    Point[0]++;
                    n.Maze[Point[1], Point[0]] = '>';
                    for (int i = -1; i < 2; i += 2)
                    {
                        if ((n.Maze[Point[1] + i, Point[0]] == '#') | (n.Maze[Point[1] + i, Point[0]] == ' '))
                        {
                            n.Maze[Point[1] + i, Point[0]] = '#';
                        };
                    };
                };
                
                n.PrintMaze();
                Console.ReadLine();

            } while (IsPathConstructed == false);


            Console.ReadLine();
        }

        private int GenerateRnd(int test)
        {
            Random randomgen = new Random(test);
            return randomgen.Next(0, 4);
        }

        private void PrintMaze()
        {
            for (int i = 0; i < Maze.GetLength(0); i++)
            {
                for (int j = 0; j < Maze.GetLength(1); j++)
                {
                    Console.Write(Maze[i,j]);
                }
                Console.WriteLine();
            }
        }

        private void ResetMaze()
        {
            Maze = new char[,]
                {{'■','@','■','■','■','■','■','■','■','■','■','■','■','■','■','■'}, //0
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //1
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //2
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //3
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //4
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //5
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //6
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //7
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //8
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //9
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //10
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //11
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //12
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //13
                 {'■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■'}, //14
                 {'■','■','■','■','■','■','■','■','■','■','■','■','■','■','!','■'}};//15
                // 0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
                // 0                                       1

        }
    }
}
